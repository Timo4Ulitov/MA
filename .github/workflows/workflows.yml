name: CI/CD pipeline

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install psycopg2-binary
          pip install --no-cache-dir --upgrade -r player_service/requirements.txt

      - name: Prepare for tests (compose up)
        run: docker compose up -d --build

      - name: Run integration test
        run: python integration.py

      - name: Run component test
        run: python component.py


      - name: Clean up (compose down)
        run: docker compose down

  build_and_push_player_service:
    name: Build and push player service to Yandex Cloud
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd player_service && docker build -f Dockerfile . --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-player-services:latest --platform=linux/amd64

      - name: Login to Yandex Cloud
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag to Yandex Cloud
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-player-services:latest


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build_and_push_player_service ]
    steps:
      - name: Deploy serverless container
        uses: yc-actions/yc-sls-container-deploy@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
          container-name: ${{ secrets.YC_CONTAINER_NAME }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-player-services:latest
          revision-service-account-id: ${{ secrets.YC_SA_ID }}
          revision-env: |
            POSTGRES_URL=${{ secrets.ENV_POSTGRES_URL }}

  build_and_push_roulette_service:
    name: Build and push roulette service to DockerHub
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd roulette_service && docker build -f Dockerfile . -t ${{ secrets.DOCKER_USERNAME }}/ms-roulette-services:latest 

      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push tag to docker hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-roulette-services:latest

  keycloak:
    volumes:
      - ./imports:/opt/jboss/keycloak/imports
    image: quay.io/keycloak/keycloak
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - app-network
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./docker-config.yaml:/etc/promtail/docker-config.yaml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - app-network
    command: -config.file=/etc/promtail/docker-config.yaml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - GF_EXPLORE_ENABLED=true
    volumes:
      - grafana-storage:/var/lib/grafana


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.yml:/etc/prometheus/alert.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
    links:
      - alertmanager:alertmanager
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.max-block-duration=30m'
      - '--storage.tsdb.min-block-duration=30m'
      - '--web.enable-lifecycle'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  node:
    image: prom/node-exporter:latest
    container_name: node
    ports:
      - "9100:9100"
    networks:
      - app-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    restart: always
    networks:
      - app-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'


networks:
  app-network:
    driver: bridge

volumes:
  prometheus:
    name: prometheus
  grafana-storage:
    driver: local